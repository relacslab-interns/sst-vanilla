#ifndef sstmac_thread_included
#define sstmac_thread_included

// Replacing std::thread in this manner was very standards non-compliant
// and it's broken on newer standard library implementations 
#if 0

#ifndef SSTMAC_INSIDE_STL
#define SSTMAC_INSIDE_STL
#define THREAD_OWNS_STL
#include <sstmac/replacements/sstmac_pthread_clear.h>
#include <sstmac/replacements/clear_symbol_macros.h>
#endif

#include <sstmac/software/process/std_thread.h>

namespace std {
using thread = sstmac::sw::std_thread_standin;
template <class T> using lock_guard = sstmac::sw::lock_guard_standin<T>;
}

namespace std {
namespace this_thread {
template <class T=void> T yield(){}
}
}

#ifdef THREAD_OWNS_STL
#undef THREAD_OWNS_STL
#undef SSTMAC_INSIDE_STL
#include <sstmac/replacements/return_symbol_macros.h>
#include <sstmac/replacements/sstmac_pthread_return.h>
#endif

#endif // end if 0 

#endif

