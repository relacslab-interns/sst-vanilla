
template <class T>
struct A {
 T& getX(){ char* sstmac_global_data = get_sstmac_global_data();; {
  return x_getter();
  }}
 static T x; public: static int __offset_x;static decltype(x)& x_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_x;return *((decltype(x)*)(offsetPtr));}
 void fxn(){ char* sstmac_global_data = get_sstmac_global_data();; {
  x_getter() -= 1;
  }}
 T& getXagain(){ char* sstmac_global_data = get_sstmac_global_data();; {
  return x_getter();
  }}
};
template <class T> T A<T>::x = 5;template <class T> int A<T>::__offset_x = sstmac::inplaceCppGlobal<A<T>,T,false>(5);

namespace ns {
template <class T, class U>
struct B {
 static int x; public: static int __offset_x;static decltype(x)& x_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_x;return *((decltype(x)*)(offsetPtr));}
};
template <class T, class U> int B<T,U>::x(42);template <class T,class U> int B<T,U>::__offset_x = sstmac::inplaceCppGlobal<B<T,U>,int,false>(42);
}

template <class T, const char* tag>
class C {
 static int value; public: static int __offset_value;static decltype(value)& value_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_value;return *((decltype(value)*)(offsetPtr));}
 static T anotherValue; public: static int __offset_anotherValue;static decltype(anotherValue)& anotherValue_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_anotherValue;return *((decltype(anotherValue)*)(offsetPtr));}
};

template <class T, const char* tag> int C<T,tag>::value;template <class T,const char * tag> int C<T,tag>::__offset_value = sstmac::inplaceCppGlobal<C<T,tag>,int,false>();
template <class T, const char* tag> T C<T,tag>::anotherValue;template <class T,const char * tag> int C<T,tag>::__offset_anotherValue = sstmac::inplaceCppGlobal<C<T,tag>,T,false>();

class E {};

template <typename>
class D {
  static int var; public: static int __offset_var;static decltype(var)& var_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_var;return *((decltype(var)*)(offsetPtr));}
  static E e; public: static int __offset_e;static decltype(e)& e_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_e;return *((decltype(e)*)(offsetPtr));}
};
template <class T> int D<T>::var;template <class T> int D<T>::__offset_var = sstmac::inplaceCppGlobal<D<T>,int,false>();
template <class T> E D<T>::e = {};template <class T> int D<T>::__offset_e = sstmac::inplaceCppGlobal<D<T>, E,false>();


template <class T>
struct F {
  static A<int> a; public: static int __offset_a;static decltype(a)& a_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_a;return *((decltype(a)*)(offsetPtr));}
};
template <class T> A<int> F<T>::a;template <class T> int F<T>::__offset_a = sstmac::inplaceCppGlobal<F<T>,A<int>,false>();

template <class T>
struct G {
  using MemberType = A<int>;
  static MemberType a; public: static int __offset_a;static decltype(a)& a_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_a;return *((decltype(a)*)(offsetPtr));}
  static int b; public: static int __offset_b;static decltype(b)& b_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_b;return *((decltype(b)*)(offsetPtr));}
};
template <class T> typename G<T>::MemberType G<T>::a;template <class T> int G<T>::__offset_a = sstmac::inplaceCppGlobal<G<T>,typename G<T>::MemberType,false>();
template <class T> int G<T>::b = 0;template <class T> int G<T>::__offset_b = sstmac::inplaceCppGlobal<G<T>,int,false>(0);

void fxn(){ char* sstmac_global_data = get_sstmac_global_data();; ; {
  G<int>::a_getter().fxn();
  G<double>::b_getter() += 1;
 }}
#include <sstmac/software/process/global.h>

