

template <class T>
class A {
 public:
  A(int x);
};

template <class T>
void fxn()
{ char* sstmac_global_data = get_sstmac_global_data();{
  int init = 0;
  static int x = 10;struct inner_xyz_fxnx{};static int __offset_xyz_fxnx = sstmac::inplaceCppGlobal<inner_xyz_fxnx,int,false>(10);int* sstmac_xyz_fxnx=(int*)(sstmac_global_data + __offset_xyz_fxnx); 
  static A<T> a(0);struct inner_xyz_fxna{};static int __offset_xyz_fxna = sstmac::inplaceCppGlobal<inner_xyz_fxna,A<T>,false>((0));A<T>* sstmac_xyz_fxna=(A<T>*)(sstmac_global_data + __offset_xyz_fxna); 
  static A<T> b(init);struct inner_xyz_fxnb{};static int __offset_xyz_fxnb = sstmac::inplaceCppGlobal<inner_xyz_fxnb,A<T>,false>((init));A<T>* sstmac_xyz_fxnb=(A<T>*)(sstmac_global_data + __offset_xyz_fxnb); 
 }}

void next_fxn()
{
  fxn<int>();
}
#include <sstmac/software/process/global.h>
#include <sstmac/software/process/memoize.h>

