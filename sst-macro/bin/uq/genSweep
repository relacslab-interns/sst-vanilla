#! /usr/bin/env python

import sys
import os

def usage(of):
  of.write("usage: ./genSweep <template_file> <points_file> <param_def_file>\n")

if len(sys.argv) != 4:
  usage(sys.stderr)
  sys.exit("Need 3 arguments")

temp_file = sys.argv[1]
pts_file = sys.argv[2]
param_file = sys.argv[3]

if not os.path.isfile(temp_file):
  usage(sys.stderr)
  sys.exit("First argument must be a valid template file")

if not os.path.isfile(pts_file):
  usage(sys.stderr)
  sys.exit("Second argument must be a valid quadrature file")

if not os.path.isfile(param_file):
  usage(sys.stderr)
  sys.exit("Third argument must be a valid parameter definition file")

template = open(temp_file).read()
pts_text = open(pts_file).read()
param_text = open(param_file).read()

class Parameter:
  def __init__(self, name, lower, upper):
    self.name = name
    self.lower = float(lower)
    self.upper = float(upper)

    #y = mx + b
    #upper = m + b
    #lower = -m + b
    #2b = upper + lower
    #2m = upper - lower
    self.m = (self.upper - self.lower) * 0.5
    self.b = (self.upper + self.lower) * 0.5


  def value(self,v):
    return self.m*v + self.b

  def replace(self, text, pos):
    #pos is a position normalized from -1 to 1
    actualValue = self.m*pos + self.b
    repl = "%12.8f" % actualValue
    toRepl = "$%s" % self.name
    if not toRepl in text:
      sys.exit("Cannot find replacement text %s in template file" % toRepl)
    return text.replace(toRepl,repl)

params = []
for line in param_text.strip().splitlines():
  name, lower, upper = line.strip().split()
  params.append(Parameter(name, lower, upper))
      
index = 1
for line in pts_text.strip().splitlines():
  values = map(float, line.strip().split())
  text = template 
  if not len(values) == len(params):
    sys.exit("Mismatch in length of values and length of parameters: %d != %d" % (len(values), len(params)))
  for i in range(len(values)):
    p = params[i]
    v = values[i]
    text = p.replace(text, v)

  param_file = "params_%d.ini" % index
  print param_file
  open(param_file, "w").write(text)

  if "$" in text:
    sys.exit("Not all of the template parameters converted")

  index += 1
    

